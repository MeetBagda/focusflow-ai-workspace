/**
 * @fileoverview API service for interacting with task-related backend endpoints.
 * This file defines functions for fetching, creating, updating, and deleting tasks,
 * ensuring all requests are authenticated using the useAuthenticatedFetch hook.
 */

import { useAuthenticatedFetch } from './client'; // Import the custom authenticated fetch hook
import { Task, PartialUpdate } from '@/types'; // Import Task and PartialUpdate types

/**
 * Custom hook to provide task API functions.
 * This hook must be called within a React component or another custom hook.
 * @returns An object containing functions for task CRUD operations.
 */
export function useTasksApi() {
  const authenticatedFetch = useAuthenticatedFetch(); // Get the authenticated fetch function

  // Fetch all tasks for the authenticated user
  const getTasks = async (): Promise<Task[]> => {
    return authenticatedFetch<Task[]>('/tasks');
  };

  // Create a new task for the authenticated user
  const createTask = async (taskData: Omit<Task, 'id' | 'user_id' | 'created_at' | 'updated_at'>): Promise<Task> => {
    return authenticatedFetch<Task>('/tasks', {
      method: 'POST',
      body: JSON.stringify(taskData),
    });
  };

  // Update an existing task for the authenticated user
  const updateTask = async (id: number, updates: PartialUpdate<Task>): Promise<Task> => {
    return authenticatedFetch<Task>(`/tasks/${id}`, {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  };

  // Delete a task for the authenticated user
  const deleteTask = async (id: number): Promise<void> => {
    return authenticatedFetch<void>(`/tasks/${id}`, {
      method: 'DELETE',
    });
  };

  // Duplicate a task for the authenticated user
  // Note: Your backend doesn't currently have a duplicate endpoint.
  // This is a client-side duplication that then creates a new task.
  const duplicateTask = async (task: Task): Promise<Task> => {
    // Remove properties that should be generated by the backend for a new task
    const { id, user_id, created_at, updated_at, ...newTaskData } = task;
    return createTask(newTaskData);
  };

  return {
    getTasks,
    createTask,
    updateTask,
    deleteTask,
    duplicateTask,
  };
}
